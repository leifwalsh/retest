#!/usr/bin/python
# -*- mode: Python; -*-

import sys
import os
import os.path
from optparse import OptionParser, make_option
from subprocess import call
from xml.dom.minidom import parse
import hashlib

test_function_prefix = 'test_'

visited_tests = []
performed_tests = []
performed_tests_count = 0
retest_conf_file = '.retest'

cxx_flags_loaded = False

SHELL = "/bin/bash"
MAKE_CMD = None
CXXFLAGS = None
LDFLAGS = None

# Utility functions
def source_name(file_name):
    return '.%s.cc' % os.path.splitext(file_name)[0]

def exec_name(file_name):
    return '.%s.exec' % os.path.splitext(file_name)[0]

def conf_name(file_name):
    return '.%s.conf' % os.path.splitext(file_name)[0]

def test_cmp(x, y):
    return x[1]['line'] - y[1]['line']

def gen_fn_hash(source, node):
    begin = int(node.getAttribute('line'))
    if(node.getAttribute('endline') != ''):
        end = int(node.getAttribute('endline'))
    else:
        end = begin
    m = hashlib.md5()
    with open(source, 'r') as src:
        i = 1
        for line in src:
            if i > end:
                break
            if i >= begin and i <= end:
                m.update(line)
            i += 1
    return m.hexdigest()

# Inspect the test file source code and automatically generate a file
# that can run unit tests dynamically.
def gen_main_file(test_file, dom):
    config = { 'test_list' : [], 'tests' : {} }
    for node in dom.getElementsByTagName("Function"):
        fn_name = node.getAttribute('name')
        if fn_name.startswith(test_function_prefix):
            config['tests'][fn_name] = { 'known_state' : None,
                                         'hash' : gen_fn_hash(test_file, node),
                                         'line' : int(node.getAttribute('line'))}
    # Generate a sorted test list
    test_list = sorted(config['tests'].items(), test_cmp)
    for (fn, test) in test_list:
        config['test_list'].append(fn)
        del config['tests'][fn]['line']
    # Generate the source file
    with open(source_name(test_file), 'w') as gen:
        with open(test_file, 'r') as test_file:
            for line in test_file:
                gen.write(line)
        gen.write('\n/*** GENERATED CODE ***/\n\n')
        gen.write('#include <string.h>\n\n')
        gen.write('int main(int argc, char *argv[]) {\n')
        gen.write('    if(argc != 2) {\n')
        gen.write('        return -1;\n')
        gen.write('    }\n\n')
        for test in config['test_list']:
            gen.write('    if(strcmp(argv[1], "%s") == 0) {\n'
                      % test[len(test_function_prefix):])
            gen.write('        %s();\n' % test)
            gen.write('    }\n')
        gen.write('    return 0;\n')
        gen.write('}\n')
    return config

def gen_conf_file(test_file, conf):
    with open(conf_name(test_file), 'w') as gen:
        gen.write(str(conf))

def load_config(conf_file):
    with open(conf_file, 'r') as old_conf_file:
        conf = eval(old_conf_file.readline())
    return conf

def compare_configs(new_conf, conf_file):
    if not os.path.exists(conf_file):
        return new_conf
    # Read the old config file
    old_conf = load_config(conf_file)
    # Go through old config and see if anything changed
    for test in old_conf['test_list']:
        if not test in new_conf['tests']:
            del old_conf['tests'][test]
            continue
        if old_conf['tests'][test]['hash'] != new_conf['tests'][test]['hash']:
            old_conf['tests'][test]['known_state'] = None
            old_conf['tests'][test]['hash'] = new_conf['tests'][test]['hash']
    # Go through new config and see if we need to add anything
    for test in new_conf['test_list']:
        if not test in old_conf['tests']:
            old_conf['tests'][test] = new_conf['tests'][test]
    old_conf['test_list'] = new_conf['test_list']
    return old_conf

def print_test_status(test, res):
    global performed_tests_count
    if res:
        res = 'P'
    else:
        res = 'F'
    print '%s [%s]' % (test, res)
    if res == 'F':
        print ''
    performed_tests_count += 1

def print_results():
    print("Ran %d of %d, %d failed"
          % (len(performed_tests),
             len(visited_tests),
             len(filter(lambda x: x[1] != True, performed_tests))))

def run_tests(exec_file, conf, fulltest=False):
    global visited_tests, performed_tests
    for test in conf['test_list']:
        visited_tests.append(test)
        if fulltest or conf['tests'][test]['known_state'] != True:
            ret = call(['./%s' % exec_file, test[len(test_function_prefix):]])
            print_test_status(test, ret == 0)
            performed_tests.append((test, (ret == 0)))
            conf['tests'][test]['known_state'] = (ret == 0)
    return conf

def load_compiler_flags():
    global cxx_flags_loaded
    old_cwd = None
    cwd = os.path.normpath(os.path.realpath(os.getcwd()))
    conf = None
    while True:
        temp_path = os.path.join(cwd, retest_conf_file)
        if os.path.exists(temp_path):
            conf = temp_path
        if conf or (cwd == old_cwd) or cxx_flags_loaded:
            break
        old_cwd = cwd
        cwd = os.path.normpath(os.path.realpath(os.path.join(cwd, '..')))
    if conf and (cxx_flags_loaded != conf):
        cxx_flags_loaded = conf
        execfile(conf, globals())
    elif not cxx_flags_loaded:
        print("No configuration file found. Please run 'retest init'")
        sys.exit(-1)

def process_test_file(file, fulltest):
    # Some files
    xml_file = '%s.xml' % file
    source_file = source_name(file)
    exec_file = exec_name(file)
    conf_file = conf_name(file)
    # Check the times
    if(not (os.path.exists(exec_file) and
            os.path.exists(conf_file) and
            os.path.getmtime(exec_file) >= os.path.getmtime(file) and
            os.path.getmtime(conf_file) >= os.path.getmtime(file))):
        # Remove generated files
        call(['rm', '-f', xml_file])
        call(['rm', '-f', source_file])
        call(['rm', '-f', exec_file])
        # Generate XML out of the file
        gccxmlargs = ['gccxml', '-fxml=%s' % xml_file]
        if CXXFLAGS:
            gccxmlargs.append('--gccxml-cxxflags')
            gccxmlargs.extend(CXXFLAGS.rsplit(' '))
        gccxmlargs.append(file)
        ret = call(gccxmlargs)
        if not (ret == 0):
            sys.exit(-1)
        # Load the XML
        dom = parse(xml_file)
        call(['rm', '-f', xml_file])
        # Generate executable
        conf = gen_main_file(file, dom)
        # Compile
        gccargs = "g++ -o %s" % exec_file
        gccargs += " "
        if CXXFLAGS:
            gccargs += CXXFLAGS
            gccargs += " "
        if LDFLAGS:
            gccargs += LDFLAGS
            gccargs += " "
        gccargs += source_file
        ret = call([SHELL, '-c', gccargs])
        if not (ret == 0):
            sys.exit(-1)
        call(['rm', '-f', source_file])
        # Compare configuration files
        conf = compare_configs(conf, conf_file)
    else:
        conf = load_config(conf_file)
    # Remove old config file
    call(['rm', '-f', conf_file])
    # Run the test
    conf = run_tests(exec_file, conf, fulltest)
    # Generate new configuration file
    gen_conf_file(file, conf)

def init_testing():
    # Load up compiler flags for the directory
    load_compiler_flags()
    # Make the main project first
    if MAKE_CMD:
        ret = call([SHELL, "-c", MAKE_CMD])
        if not (ret == 0):
            sys.exit(-1)

def recursive_retest(dir, fulltest):
    init_testing()
    for root, dirs, files in os.walk(os.path.abspath(dir)):
        # Load up compiler flags for the directory
        load_compiler_flags()
        # Go through the files
        for file in files:
            if os.path.splitext(file)[1] in ['.c', '.cc'] and file[0] != '.':
                os.chdir(os.path.abspath(root))
                process_test_file(file, fulltest)
    # Results!
    print_results()

def recursive_clean():
    for root, dirs, files in os.walk(os.path.abspath(os.getcwd())):
        for file in files:
            if os.path.splitext(file)[1] in ['.c', '.cc'] and file[0] != '.':
                os.chdir(os.path.abspath(root))
                call(['rm', '-f', '%s.xml' % file])
                call(['rm', '-f', source_name(file)])
                call(['rm', '-f', exec_name(file)])
                call(['rm', '-f', conf_name(file)])

def init_retest():
    with open(retest_conf_file, 'w') as conf:
        conf.write("# Shell to use for running the compiler\n")
        conf.write('SHELL = "/bin/bash"\n')
        conf.write("# A shell command to make the main project\n")
        conf.write('MAKE_CMD = ""\n')
        conf.write("# Arguments to pass to the compiler\n")
        conf.write('CXXFLAGS = ""\n')
        conf.write("# Arguments to pass to the linker\n")
        conf.write('LDFLAGS = ""\n')

def main(argv):
    parser = OptionParser(
        usage='Usage: %prog [init | clean | [files|dirs]... ]',
        option_list=[
            make_option('-F', '--full', action='store_true', dest='full',
                        default=False,
                        help='run all tests, regardless of previous successes'),
            make_option('--no-full', action='store_false', dest='full',
                        help='opposite of --full (default)')
            ])
    options, args = parser.parse_args()
    if len(args) > 0:
        if args[0] == 'clean':
            if len(args) > 1:
                parser.error('clean should be specified alone')
            recursive_clean()
            return 0
        if args[0] == 'init':
            if len(args) > 1:
                parser.error('init should be specified alone')
            init_retest()
            return 0
        for arg in args:
            if os.path.splitext(arg)[1] in ['.c', '.cc']:
                if not os.path.exists(arg):
                    parser.error('%s not found' % arg)
                if os.path.split(arg)[0] != '':
                    saved_dir = os.getcwd()
                    os.chdir(os.path.split(arg)[0])
                init_testing()
                process_test_file(os.path.split(arg)[1], options.full)
                print_results()
                if os.path.split(arg)[0] != '':
                    os.chdir(saved_dir)
            else:
                if not os.path.exists(arg):
                    parser.error('%s not found' % arg)
                recursive_retest(arg, options.full)
    else:
        recursive_retest(os.getcwd(), options.full)
    if len(filter(lambda x: not x[1], performed_tests)) > 0:
        return -1
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
